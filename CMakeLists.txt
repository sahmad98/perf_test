cmake_minimum_required(VERSION 3.10)

project(PerfTest LANGUAGES CXX C)

set(SOURCE ${PROJECT_SOURCE_DIR}/src)
#set(EXECUTABLE_OUTPUT_PATH bin)
include_directories(${LOCAL})
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -pthread -std=c++17 -fopenmp")

add_executable(RowColumnAccess ${SOURCE}/array_access_test.cpp)
add_executable(CPUPinning ${SOURCE}/cpu_pinning.cpp)
add_executable(GoogleBench ${SOURCE}/google_benchmark.cpp)
add_executable(CachePerf ${SOURCE}/cache_perf.cpp)
add_executable(AtomicPerf ${SOURCE}/atomic_perf.cpp)
add_executable(VectorizedTest ${SOURCE}/vectorized_test.cpp)
add_executable(MiscPerf ${SOURCE}/misc_perf.cpp)
add_executable(LockPerf ${SOURCE}/lock_benchmark.cpp)
add_executable(FixTest ${SOURCE}/bench_fixture.cpp)
add_executable(RuntimePolymorphism ${SOURCE}/virtual_functions.cpp)
add_executable(CacheThrash ${SOURCE}/cache_thrashing.cpp)
add_executable(MemoryMappedFile ${SOURCE}/memory_mapped_io.cpp)
add_executable(VecMemCpy ${SOURCE}/vecmemcpy.cpp)
add_executable(VecStdMemCpy ${SOURCE}/vecstdmemcpy.cpp)

target_link_libraries(RowColumnAccess benchmark)
target_link_libraries(GoogleBench benchmark)
target_link_libraries(CachePerf benchmark)
target_link_libraries(AtomicPerf benchmark)
target_link_libraries(VectorizedTest benchmark)
target_link_libraries(MiscPerf benchmark)
target_link_libraries(LockPerf benchmark)
target_link_libraries(FixTest benchmark)
target_link_libraries(RuntimePolymorphism benchmark)
target_link_libraries(CacheThrash benchmark)
target_link_libraries(MemoryMappedFile benchmark)
target_link_libraries(VecMemCpy benchmark)
target_link_libraries(VecStdMemCpy benchmark)
